<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->

<template name="listTickets" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="predefinedFilters"
               description="The various filters available are new_and_my_open, watching, spam, deleted."/>
    <parameter name="requesterId" description="The unique identifier of the requester."/>
    <parameter name="updatedSince" description="The tickets updated since specific date."/>
    <parameter name="companyId" description="The unique identifier of the company."/>
    <parameter name="email" description="The email address."/>
    <parameter name="page" description="The requested page number."/>
    <parameter name="orderBy" description="Tickets will be ordered by given values."/>
    <parameter name="orderType" description="Sorting by ascending or descending."/>
    <parameter name="include" description="Result will include specific information according to the value."/>
    <sequence>
        <property name="uri.var.predefinedFilters" expression="$func:predefinedFilters"/>
        <property name="uri.var.requesterId" expression="$func:requesterId"/>
        <property name="uri.var.updatedSince" expression="$func:updatedSince"/>
        <property name="uri.var.companyId" expression="$func:companyId"/>
        <property name="uri.var.email" expression="$func:email"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.orderBy" expression="$func:orderBy"/>
        <property name="uri.var.orderType" expression="$func:orderType"/>
        <property name="uri.var.include" expression="$func:include"/>
        <property name="uri.var.apiParameters" value=""/>
        <filter xpath="(not($ctx:uri.var.predefinedFilters = '' or (not(string($ctx:uri.var.predefinedFilters)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'filter=', $ctx:uri.var.predefinedFilters, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.requesterId = '' or (not(string($ctx:uri.var.requesterId)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'requester_id=', $ctx:uri.var.requesterId, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.updatedSince = '' or (not(string($ctx:uri.var.updatedSince)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'updated_since=', $ctx:uri.var.updatedSince, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.companyId = '' or (not(string($ctx:uri.var.companyId)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'company_id=', $ctx:uri.var.companyId, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.email = '' or (not(string($ctx:uri.var.email)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'email=', $ctx:uri.var.email, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.page = '' or (not(string($ctx:uri.var.page)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'page=', $ctx:uri.var.page, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.orderBy = '' or (not(string($ctx:uri.var.orderBy)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'order_by=', $ctx:uri.var.orderBy, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.orderType = '' or (not(string($ctx:uri.var.orderType)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'order_type=', $ctx:uri.var.orderType, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.include = '' or (not(string($ctx:uri.var.include)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'include=', $ctx:uri.var.include, '&amp;')"/>
            </then>
        </filter>
        <property name="messageType" value="application/json" scope="axis2"/>
        <filter source="$ctx:freshdeskBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="get" uri-template="{+uri.var.apiUrl}/api/v2/tickets?{+uri.var.apiParameters}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="get" uri-template="{+uri.var.apiUrl}/api/v2/tickets?{+uri.var.apiParameters}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
        <!-- Remove response custom header information -->
        <header name="X-Runtime" scope="transport" action="remove"/>
        <header name="X-Powered-By" scope="transport" action="remove"/>
    </sequence>
</template>